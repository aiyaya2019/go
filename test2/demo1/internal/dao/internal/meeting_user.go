// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// MeetingUserDao is the data access object for table meeting_user.
type MeetingUserDao struct {
	table   string             // table is the underlying table name of the DAO.
	group   string             // group is the database configuration group name of current DAO.
	columns MeetingUserColumns // columns contains all the column names of Table for convenient usage.
}

// MeetingUserColumns defines and stores column names for table meeting_user.
type MeetingUserColumns struct {
	Id                  string //
	MeetingUuid         string //
	UserUuid            string //
	TerminalId          string //
	IsBroadcast         string //
	Status              string //
	IsSecretary         string //
	Username            string //
	Nameplate           string //
	IsUpdateNameplate   string //
	IsUpdateWelcomePage string //
	Mark                string //
	FreeLogin           string //
	IsChairman          string //
	IsAttendee          string //
	Sort                string //
	Lifter              string //
	Deleted             string //
	Unit                string //
	Position            string //
	IsLocal             string //
	Alias               string //
	AttendType          string //
	IsAutoQueue         string //
	IsSign              string //
	CreatedAt           string //
	UpdatedAt           string //
}

// meetingUserColumns holds the columns for table meeting_user.
var meetingUserColumns = MeetingUserColumns{
	Id:                  "id",
	MeetingUuid:         "meeting_uuid",
	UserUuid:            "user_uuid",
	TerminalId:          "terminal_id",
	IsBroadcast:         "is_broadcast",
	Status:              "status",
	IsSecretary:         "is_secretary",
	Username:            "username",
	Nameplate:           "nameplate",
	IsUpdateNameplate:   "is_update_nameplate",
	IsUpdateWelcomePage: "is_update_welcome_page",
	Mark:                "mark",
	FreeLogin:           "free_login",
	IsChairman:          "is_chairman",
	IsAttendee:          "is_attendee",
	Sort:                "sort",
	Lifter:              "lifter",
	Deleted:             "deleted",
	Unit:                "unit",
	Position:            "position",
	IsLocal:             "is_local",
	Alias:               "alias",
	AttendType:          "attend_type",
	IsAutoQueue:         "is_auto_queue",
	IsSign:              "is_sign",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
}

// NewMeetingUserDao creates and returns a new DAO object for table data access.
func NewMeetingUserDao() *MeetingUserDao {
	return &MeetingUserDao{
		group:   "default",
		table:   "meeting_user",
		columns: meetingUserColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *MeetingUserDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *MeetingUserDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *MeetingUserDao) Columns() MeetingUserColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *MeetingUserDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *MeetingUserDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *MeetingUserDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
