// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// MeetingVoteDao is the data access object for table meeting_vote.
type MeetingVoteDao struct {
	table   string             // table is the underlying table name of the DAO.
	group   string             // group is the database configuration group name of current DAO.
	columns MeetingVoteColumns // columns contains all the column names of Table for convenient usage.
}

// MeetingVoteColumns defines and stores column names for table meeting_vote.
type MeetingVoteColumns struct {
	Id                   string //
	Uuid                 string //
	PlatformUuid         string //
	MeetingUuid          string //
	MeetingDatumUuid     string //
	SystemFileUuid       string //
	VoteTitle            string //
	VoteName             string //
	StartTime            string //
	EndTime              string //
	Countdown            string //
	VoteType             string //
	IsMultiple           string //
	IsTruename           string //
	Status               string //
	Mark                 string //
	IsSign               string //
	IsPassRate           string //
	PassRate             string //
	IsVoteTimeLimit      string //
	VoteTimeLimit        string //
	IsMark               string //
	ScreenMode           string //
	VotingAuthentication string //
	VotingForce          string //
	ScoreScore           string //
	ScoreType            string //
	IsSetting            string //
	RandomSort           string //
	ForceVote            string //
	AutoEnd              string //
	EditResult           string //
	CountVotes           string //
	CreatedAt            string //
	UpdatedAt            string //
}

// meetingVoteColumns holds the columns for table meeting_vote.
var meetingVoteColumns = MeetingVoteColumns{
	Id:                   "id",
	Uuid:                 "uuid",
	PlatformUuid:         "platform_uuid",
	MeetingUuid:          "meeting_uuid",
	MeetingDatumUuid:     "meeting_datum_uuid",
	SystemFileUuid:       "system_file_uuid",
	VoteTitle:            "vote_title",
	VoteName:             "vote_name",
	StartTime:            "start_time",
	EndTime:              "end_time",
	Countdown:            "countdown",
	VoteType:             "vote_type",
	IsMultiple:           "is_multiple",
	IsTruename:           "is_truename",
	Status:               "status",
	Mark:                 "mark",
	IsSign:               "is_sign",
	IsPassRate:           "is_pass_rate",
	PassRate:             "pass_rate",
	IsVoteTimeLimit:      "is_vote_time_limit",
	VoteTimeLimit:        "vote_time_limit",
	IsMark:               "is_mark",
	ScreenMode:           "screen_mode",
	VotingAuthentication: "voting_authentication",
	VotingForce:          "voting_force",
	ScoreScore:           "score_score",
	ScoreType:            "score_type",
	IsSetting:            "is_setting",
	RandomSort:           "random_sort",
	ForceVote:            "force_vote",
	AutoEnd:              "auto_end",
	EditResult:           "edit_result",
	CountVotes:           "count_votes",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
}

// NewMeetingVoteDao creates and returns a new DAO object for table data access.
func NewMeetingVoteDao() *MeetingVoteDao {
	return &MeetingVoteDao{
		group:   "default",
		table:   "meeting_vote",
		columns: meetingVoteColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *MeetingVoteDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *MeetingVoteDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *MeetingVoteDao) Columns() MeetingVoteColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *MeetingVoteDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *MeetingVoteDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *MeetingVoteDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
