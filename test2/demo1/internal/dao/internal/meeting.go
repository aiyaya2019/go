// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// MeetingDao is the data access object for table meeting.
type MeetingDao struct {
	table   string         // table is the underlying table name of the DAO.
	group   string         // group is the database configuration group name of current DAO.
	columns MeetingColumns // columns contains all the column names of Table for convenient usage.
}

// MeetingColumns defines and stores column names for table meeting.
type MeetingColumns struct {
	Id               string //
	PlatformUuid     string //
	Uuid             string //
	UserUuid         string //
	Name             string //
	Type             string //
	Moderator        string //
	Secretary        string //
	StartTime        string //
	EndTime          string //
	RealStartTime    string //
	RealEndTime      string //
	MasterRoomId     string //
	RoomListId       string //
	MeetingSlogan    string //
	Nameplate        string //
	Status           string //
	IsSecrect        string //
	Description      string //
	AllUser          string //
	ModeratorName    string //
	MeetingType      string //
	IsHost           string //
	HostMeetingUuid  string //
	HostPlatformUuid string //
	HostIp           string //
	HostPsIp         string //
	HostPsPort       string //
	MenuData         string //
	MenuTab          string //
	NameplateCustom  string //
	WelcomeCustom    string //
	CustomBgImg      string //
	Deleted          string //
	CreatedAt        string //
	UpdatedAt        string //
}

// meetingColumns holds the columns for table meeting.
var meetingColumns = MeetingColumns{
	Id:               "id",
	PlatformUuid:     "platform_uuid",
	Uuid:             "uuid",
	UserUuid:         "user_uuid",
	Name:             "name",
	Type:             "type",
	Moderator:        "moderator",
	Secretary:        "secretary",
	StartTime:        "start_time",
	EndTime:          "end_time",
	RealStartTime:    "real_start_time",
	RealEndTime:      "real_end_time",
	MasterRoomId:     "master_room_id",
	RoomListId:       "room_list_id",
	MeetingSlogan:    "meeting_slogan",
	Nameplate:        "nameplate",
	Status:           "status",
	IsSecrect:        "is_secrect",
	Description:      "description",
	AllUser:          "all_user",
	ModeratorName:    "moderator_name",
	MeetingType:      "meeting_type",
	IsHost:           "is_host",
	HostMeetingUuid:  "host_meeting_uuid",
	HostPlatformUuid: "host_platform_uuid",
	HostIp:           "host_ip",
	HostPsIp:         "host_ps_ip",
	HostPsPort:       "host_ps_port",
	MenuData:         "menu_data",
	MenuTab:          "menu_tab",
	NameplateCustom:  "nameplate_custom",
	WelcomeCustom:    "welcome_custom",
	CustomBgImg:      "custom_bg_img",
	Deleted:          "deleted",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

// NewMeetingDao creates and returns a new DAO object for table data access.
func NewMeetingDao() *MeetingDao {
	return &MeetingDao{
		group:   "default",
		table:   "meeting",
		columns: meetingColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *MeetingDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *MeetingDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *MeetingDao) Columns() MeetingColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *MeetingDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *MeetingDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *MeetingDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
